import math
import collections
a,b,c,d,e = map(int,input().split(' '))#ヘッダ(a:道路情報の行数、b:交差点情報の行数、c:駐車可能箇所情報の行数、d:配達先情報の行数、e:クエリの行数)
road_info=[input().split(' ') for i in range(a)]#道路情報
inter_info=[input().split(' ') for i in range(b)]#交差点情報
park_info=[input().split(' ') for i in range(c)]#駐車可能箇所情報
ship_info=[input().split(' ') for i in range(d)]#配達先情報
query=[input().split(' ') for i in range(e)]#クエリ

inter=[]#交差点の空集合
for i in range(b):
  inter.append(inter_info[i][0])
inter=list(set(inter))#set()で重複した要素を削除
  
park=[]#駐車場の空集合
for i in range(c):
  park.append(park_info[i][0])
park_replace = [s.replace('ES', 'SE') for s in park]#c(park_info)のESをSEに変更
park_replace = list(set(park_replace))#set()で重複した要素を削除

keisan0=[[] for i in range(a)]
keisan1=[[] for i in range(a)]
for i in range(a):
  for j in range(c):
    if park_info[j][1]==road_info[i][0]:
      keisan0[i].append([park_info[j][0],park_info[j][2]])
      keisan1[i].append([park_info[j][0],park_info[j][2]])
  for m in range(d):
    if ship_info[m][1]==road_info[i][0]:
      keisan1[i].append([ship_info[m][0],ship_info[m][2]])


#nodeとedgeの数を求める
#車両の場合
node_sharyo=len(collections.Counter(inter))+len(collections.Counter(park_replace))#車両の場合のノード数
edge_sharyo = 0#車両の場合のエッジ数(有効グラフを含む)
for i in range(a):
  #print(road_info[i][2])
  #print(keisan0[i])
  if int(road_info[i][2]) == 0:
     edge_sharyo += int(((len(keisan0[i])/2)+1) * 2)
     #print(((len(keisan0[i])/2)+1) * 2)
     #print(edge_sharyo)
  else:
     edge_sharyo += len(keisan0[i]) + 1
     #print(len(keisan0[i]) + 1)
     #print(edge_sharyo)
  #print("=====")
#print(edge_sharyo)

#台車の場合
node_daisha=len(collections.Counter(inter))+len(collections.Counter(park_replace))+d#台車の場合のノード数
edge_daisha=len(collections.Counter(park_replace))+d+a#台車の場合のエッジ数

print("=====nodeとedgeの数(車両の場合)====")
print("node："+str(node_sharyo))
print("edge："+str(edge_sharyo))
print("=====nodeとedgeの数(台車の場合)====")
print("node："+str(node_daisha))
print("edge："+str(edge_daisha*2)+"，アルゴリズムに使うのは"+str(edge_daisha))

